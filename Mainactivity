package com.example.ddd.ethernetshldtts;
//импорт библиотек
import android.Manifest;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import com.example.ddd.translation_engine.TranslatorFactory;
import com.example.ddd.translation_engine.utils.ConversionCallaback;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MainActivity extends AppCompatActivity  implements NavigationView.OnNavigationItemSelectedListener,ConversionCallaback {

    //константы класса голосовых команд
    private static final int TTS = 0;
    private static final int STT = 1;
    private static int CURRENT_MODE = -1;
    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 125;
   //переменные для ввода синтаксиса URL и голосовых/текстовых команд
    public final static String PREF_IP = "PREF_IP_ADDRESS";
    public final static String PREF_PORT = "PREF_PORT_NUMBER";
    public static final String PREF_VOICE = "prefVoice";
    public String voiceCommand = "";
    public String inputCommand = "";
    public static final String PREF_COMMAND = "pref_command";


    // описание кнопок и текстовых выходных данных
    private Button buttonVoice,buttonPin2, buttonPin3, buttonPin5;
    private Switch aSwitch1,aSwitch2,aSwitch3,aSwitch4,aSwitch5,aSwitch6,aSwitch7,aSwitch8,aSwitch9,aSwitch10,aSwitch11,aSwitch12;
    private EditText editTextIPAddress, editTextPortNumber;
    private TextView textViewCommand;
    // общие параметры, используемые для сохранения IP-адреса и порта, сохраняющиеся после закрытия приложения в памяти    SharedPreferences.Editor editor;
SharedPreferences sharedPreferences;

// Метод инициализации запроса доступа к функциям устройства
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (Build.VERSION.SDK_INT >= 23) {
            // Если версия SDK – 23 и младше то открывается диалог с требованием доступа
            requestForPermission();
        } else {
            //иначе нет необходимости
        }
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        sharedPreferences = getSharedPreferences("ETHERNET_SHIELD_PREFS", Context.MODE_PRIVATE);
        editor = sharedPreferences.edit();

 buttonVoice = (Button)findViewById(R.id.buttonVoice); //при нажатии кнопки происходит ссылка на идентификатор элемента ButtonVoice
 textViewCommand = (TextView) findViewById(R.id.textViewInput);
//при нажатии кнопки происходит ссылка на идентификатор элемента textViewInput
        inputCommand = sharedPreferences.getString(PREF_COMMAND,"");
//входящая команда получает значение из метода sharedPreferences
        textViewCommand.setOnLongClickListener(new View.OnLongClickListener() {
        public boolean onLongClick(View v) {
            if(textViewCommand.getText().equals(inputCommand))
// если тестовая команда равна выходной команде
            sendRequestArduino(getBaseContext(),1);
// через метод sendRequestArduino выполняется запрос на команду «1»
            return false;
        }
    });
    voiceCommand = sharedPreferences.getString(PREF_VOICE,"");

    aSwitch1 = (Switch)findViewById(R.id.switch1); aSwitch2 = (Switch)findViewById(R.id.switch2); aSwitch3 = (Switch)findViewById(R.id.switch3); aSwitch4 = (Switch)findViewById(R.id.switch4);aSwitch5 = (Switch)findViewById(R.id.switch5); aSwitch6 = (Switch)findViewById(R.id.switch6); aSwitch7 = (Switch)findViewById(R.id.switch7); aSwitch8 = (Switch)findViewById(R.id.switch8);aSwitch9 = (Switch)findViewById(R.id.switch9); aSwitch10 = (Switch)findViewById(R.id.switch10); aSwitch11 = (Switch)findViewById(R.id.switch11); aSwitch12 = (Switch)findViewById(R.id.switch12);
    //обработчики кнопок
    aSwitch1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            if(isChecked){
//если переключатель использован
            sendRequestArduino(getBaseContext(),1);}
// через метод sendRequestArduino выполняется запрос на команду «1»
            else sendRequestArduino(getBaseContext(),2);
// иначе через метод sendRequestArduino выполняется запрос на команду «2»
        }
    });
        aSwitch2.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),3);}
                else sendRequestArduino(getBaseContext(),4);
            }
        });
        aSwitch3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),5);}
                else sendRequestArduino(getBaseContext(),6);
            }
        });
        aSwitch4.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),7);}
                else sendRequestArduino(getBaseContext(),8);
            }
        });
        aSwitch5.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),9);}
                else sendRequestArduino(getBaseContext(),10);
            }
        });
        aSwitch6.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),11);}
                else sendRequestArduino(getBaseContext(),12);
            }
        });
        aSwitch7.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),13);}
                else sendRequestArduino(getBaseContext(),14);
            }
        });
        aSwitch8.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),15);}
                else sendRequestArduino(getBaseContext(),16);
            }
        });
        aSwitch9.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),17);}
                else sendRequestArduino(getBaseContext(),18);
            }
        });
        aSwitch10.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),19);}
                else sendRequestArduino(getBaseContext(),20);
            }
        });
        aSwitch11.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),21);}
                else sendRequestArduino(getBaseContext(),22);
            }
        });
        aSwitch12.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if(isChecked){
                    sendRequestArduino(getBaseContext(),23);}
                else sendRequestArduino(getBaseContext(),24);
            }
        });
        editTextIPAddress = (EditText)findViewById(R.id.editTextIPAddress);
        editTextPortNumber = (EditText)findViewById(R.id.editTextPortNumber);
        editTextIPAddress.setText(sharedPreferences.getString(PREF_IP,""));
 editTextPortNumber.setText(sharedPreferences.getString(PREF_PORT,""));
        buttonVoice.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                Snackbar.make(view, "Listening", Snackbar.LENGTH_LONG)
// прослушка микрофоном и запись в переменную Listening результаты работа микрофона
                        .setAction("Action", null).show();

//перевод полученной дорожки на тектсовый язык системы
                TranslatorFactory.getInstance().
                        getTranslator(TranslatorFactory.TRANSLATOR_TYPE.SPEECH_TO_TEXT, MainActivity.this).
                        initialize("Hello There", MainActivity.this);
                CURRENT_MODE = STT;
            }
        });
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
    }
//метод отправления запроса Arduino
    public void sendRequestArduino(Context context,int comand){
        // получение номера ip-адреса
        String ipAddress = editTextIPAddress.getText().toString().trim();
        // получение номера порта
        String portNumber = editTextPortNumber.getText().toString().trim();
        // сохранение данных текстовой команды, голосовой команды, номера порта и ip-адреса для последующего использования в внутренние переменные памяти
        editor.putString(PREF_COMMAND,inputCommand);
        editor.putString(PREF_VOICE,voiceCommand);
        editor.putString(PREF_IP,ipAddress); 
        editor.putString(PREF_PORT,portNumber); 
        editor.commit(); // подтверждение сохранения
//если ip-адрес и номер порта не пусты
        if(ipAddress.length()>0 && portNumber.length()>0) {
//переход к классу HttpAsencRequest
            new HttpRequestAsyncTask(
                    context, comand, ipAddress, portNumber
            ).execute();
        }
    }
    //метод работы с элементами меню\
@Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }
//методы подготовки и отображения меню
    public boolean onCreateOptionsMenu(Menu menu) {
        // автоувеличение длинны меню при добавлении новых элементов        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
@Override
    public boolean onOptionsItemSelected(MenuItem item) {.
        int id = item.getItemId();

        //переход от главного экрана (mainActivity) к вторичному меню (SettingActivity)
        if (id == R.id.action_settings) {
            Intent intent = new Intent(MainActivity.this, SettingActivity.class);
            intent.putExtra("editTextInput", inputCommand);
            intent.putExtra("voiceCommand", voiceCommand);
            startActivityForResult(intent, 1);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    //метод получения информации о другой активности Android
@Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (data == null) {return;}
        String editTextVoice = data.getStringExtra("editTextVoice");
        String editTextInput = data.getStringExtra("editTextInput");
        textViewCommand.setText(editTextInput);
        editor.putString(PREF_COMMAND,editTextInput);
        editor.putString(PREF_VOICE,editTextVoice);
        //editor.putString(PREF_IP,ipAddress); // обновление ip-адреса в памяти сохранения
        //editor.putString(PREF_PORT,portNumber); // обновление номера порта в памяти сохранения
        editor.commit(); // сохранение
    }
    // левое меню (в результате не использовано)
@Override
    @SuppressWarnings("StatementWithEmptyBody")
    public boolean onNavigationItemSelected(MenuItem item) {
         int id = item.getItemId();

        if (id == R.id.nav_camera) {
        } else if (id == R.id.nav_gallery) {
        } else if (id == R.id.nav_slideshow) {
        } else if (id == R.id.nav_manage) {
        } else if (id == R.id.nav_share) {
        } else if (id == R.id.nav_send) {
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

   // запрос к Arduino
    public String sendRequest(int pinNumber, String ipAddress, String portNumber) {
        String arduinoResponse = "ERROR";
        try {

            HttpClient httpclient = new DefaultHttpClient(); // создание Http-клиента
            URI website = new URI("http://"+ipAddress+":"+portNumber+"/$"+pinNumber);
            HttpGet getRequest = new HttpGet(); // создание http-объекта            getRequest.setURI(website); // создание и отправление URL-запроса
            HttpResponse response = httpclient.execute(getRequest); // выделение ответа на Http-запрос           
 // получение ответа от Arduino
            InputStream content = null;
            content = response.getEntity().getContent();
//чтение буферной памяти, куда был выделен ответ на запрос
            BufferedReader in = new BufferedReader(new InputStreamReader(
                    content
            ));
            arduinoResponse = in.readLine();
            // закрытие соединения
            content.close();
        } catch (ClientProtocolException e) {
            // проверка на ошибку соединения
            arduinoResponse = e.getMessage();
            e.printStackTrace();
        } catch (IOException e) {
            // проверка ошибки от верхнего домена сети
            arduinoResponse = e.getMessage();
            e.printStackTrace();
        } catch (URISyntaxException e) {
            // синтаксическая ошибка URL-адреса
            arduinoResponse = e.getMessage();
            e.printStackTrace();
        }
        // возвращение в буфер ответа от Arduino
        return arduinoResponse;
    }
//метод работы с voice
@Override
    public void onSuccess(String result) {
        Toast.makeText(this, "Result " + result, Toast.LENGTH_SHORT).show();
    if(result.equalsIgnoreCase(voiceCommand+"\n")){ //в случае совпадения записанной фразы с произносимой посылаем команду к Arduino
   // Toast.makeText(this, "!!!!!!", Toast.LENGTH_SHORT).show();
    sendRequestArduino(getBaseContext(),1);}
        switch (CURRENT_MODE) {
            case STT:
              //  sttOutput.setText(result);
        }
    }

    @Override
    public void onCompletion() {
        Toast.makeText(this, "Done ", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onErrorOccured(String errorMessage) {
       // erroConsole.setText(errorMessage);
    }
//http запрос к ардуино ===================

    private class HttpRequestAsyncTask extends AsyncTask<Void, Void, Void> {

        // описание необходимых локальных переменных
        private String requestReply,ipAddress, portNumber;
        private Context context;
        private AlertDialog alertDialog;
        private int pinNumber;

     // диалог внутри метода AsyncTask, сравнивающий входящие котекст с последним исходящим
        public HttpRequestAsyncTask(Context context, int pinNumber, String ipAddress, String portNumber)
        {
            this.context = context;
            alertDialog = new AlertDialog.Builder(context)
                    .setTitle("HTTP Response From IP Address:")
                    .setCancelable(true)
                    .create();
            this.ipAddress = ipAddress;
            this.pinNumber = pinNumber;
            this.portNumber = portNumber;
        }
//в переменной RequestReply присвивается текущего значение запроса URL-строки страницы Arduino, определяемой методом sendRequest
        @Override
        protected Void doInBackground(Void... voids) {
            requestReply = sendRequest(pinNumber,ipAddress,portNumber);
            return null;
        }
//если содержания идентичны
        @Override
        protected void onPostExecute(Void aVoid) {
            if(requestReply.equals("<!DOCTYPE HTML>"))
//вывод сообщения о выполненной команде
            Toast.makeText(getApplicationContext(),"команда выполнена",Toast.LENGTH_SHORT).show();
        }
//если содержания отличаются
        @Override
        protected void onPreExecute() {
//вывод сообщения о повторении отправки запроса
            Toast.makeText(getApplicationContext(),"send commmand to arduino",Toast.LENGTH_SHORT).show();
        }
    }
//метод запроса разрешения на использование элемента устройства
    @TargetApi(Build.VERSION_CODES.M)
    private void requestForPermission() {
        List<String> permissionsNeeded = new ArrayList<String>();
        final List<String> permissionsList = new ArrayList<String>();
        if (!isPermissionGranted(permissionsList, Manifest.permission.RECORD_AUDIO))
            permissionsNeeded.add("Require for Speech to text");
        if (permissionsList.size() > 0) {
            if (permissionsNeeded.size() > 0) {

                // в случае отказа доступа вывод сообщения о необходимости доступа
                String message = "You need to grant access to " + permissionsNeeded.get(0);
                for (int i = 1; i < permissionsNeeded.size(); i++) {
                    message = message + ", " + permissionsNeeded.get(i);
                }
                showMessageOKCancel(message,
                        new DialogInterface.OnClickListener() {
                             //метод вывода запроса доступа при нажатии на кнопку голосовой команды
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
                            }
                        });
                return;
            }
            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
            return;
        }

    }
//вывод формы с выбором разрешения доступа к микрофону устройства
    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {
        new AlertDialog.Builder(MainActivity.this)
                .setMessage(message)
                .setPositiveButton("OK", okListener)
                .setNegativeButton("Cancel", null)
                .create()
                .show();
    }
//Проверка на результат предоставления доступа
    @TargetApi(Build.VERSION_CODES.M)
    private boolean isPermissionGranted(List<String> permissionsList, String permission) {
//если значение изначального доступа не идентично полученному
        if (checkSelfPermission(permission) != 
//обновление данных о доступе
PackageManager.PERMISSION_GRANTED) {
            permissionsList.add(permission);
            // если необходимо вывести сообщение о получении доступа после данных
            if (!shouldShowRequestPermissionRationale(permission))
//отменяет вывод сообщения, поскольку уже дан доступ
                return false;
        }
        return true;
    }

// выполнение запуска и выделение памяти на сохранение аудиодорожки в буфер обмена    
@Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {
                Map<String, Integer> perms = new HashMap<String, Integer>();
                // инициализации пути для записи памяти
                perms.put(Manifest.permission.RECORD_AUDIO, PackageManager.PERMISSION_GRANTED);

                // заполнение результата пока идёт звук
                for (int i = 0; i < permissions.length; i++)
                    perms.put(permissions[i], grantResults[i]);

                // проверка доступа к памяти
                if (perms.get(Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED
                        ) {
                } else {
                    // отмена доаступа, вывод сообщения о запрепе для данного приложение доступа к микрофону
                    Toast.makeText(MainActivity.this, "Some Permissions are Denied Exiting App", Toast.LENGTH_SHORT)
                            .show();
                    finish();
                }
            }
            break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
}

